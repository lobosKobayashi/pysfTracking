Title       : add convolev:cnvlv function to kNumeric.py
            : convolev:cnvlv 関数を

Serial Num  : 00062,    State: resolving: date:2014/11/16
invalid:      date:2014/09/04
First issued: date:2014/09/09

Tags        : convolution, cnvlv

* Comments_1  : invalid reasons ← 後々 invalid 判断の比較基準にできそう
np.convolve が存在する
使うとしても control 関係に限られる
×D:\my\sf\control\sfCrrntIni.py at application example に書き残すレベルの汎用性だろう。
×任意長ベクトルの可換環としては面白いが、Zp(N)ベクトルなどへは拡張できない
cnvlv は cos 変換よりも使う
↑ 乗法単位元の存在する可換環になる
    ↑ I,R,C のときはゼロ因子を持たない
    ↑ Zp のときはゼロ因子を持つ
        ↑ ゼロ因子を除いた積は可換群
    ↑ len を指定しない演算も可能

下はもっと汎用性が無い
    continueHolomorphically
    continueHolomorphicallyWithFourierTr
    cntnHl = continueHolomorphically
    cntnHF=continueHolomorphicallyWithFourierTr

** Comments_1_1: a consideration: default cnvlv(..) の範囲ではゼロ因子がいっぱいある。
date:2014/11/18 (火) time:06:45
cnvlv([0,1,2],[0,0,3])
===============================
[ 0.  0.  0.]
---- ClTensor ----
↑不定長:full で考えればゼロ因子が存在しなくなる
    ↑ (0,1) == (0,1,0,0,0) の世界
        ↑ これを矛盾無く Python で扱うには hash((0,1))==hash((0,1,0,0,0)) すせねばならない

//@@
lenN=3
ls=range(-10 ,10 )
lsSave=[]
for k,(vx,vy) in enmitr(*[mitr(*[ls]*lenN)]*2):
    if any(vx) and any(vy) and not any(cnvlv(vx,vy)):
        print k,(vx,vy)
        lsSave.append((vx,vy))

    if sum(k)%5000 == 0:
        print k
        print lsSave
//@@@
5000s`/hour`
===============================
1.38888888889
time:05:50
↑ 1.4 -- 07h10m 頃

(4018, 982)
((0, -10, -10), (0, 0, -10))
↑ print k,(vx,vy)
//@@
lenN=3
ls=range(-10 ,10 )
lsSave=[]
for k,(vx,vy) in enmitr(*[mitr(*[ls]*lenN)]*2):
    if any(vx) and any(vy) and not any(cnvlv(vx,vy)):
        print k,(vx,vy)
        lsSave.append((vx,vy))

    if sum(k)%5000 == 0:
        print k
        print lsSave
//@@@
5000s`/hour`
===============================
1.38888888889
time:05:50
↑ 1.4 -- 07h10m 頃

(4018, 982)
((0, -10, -10), (0, 0, -10))
↑ print k,(vx,vy)

*** cnvlv に関して ktpl を定義して、帰り値も ktpl にする date:2014/11/19 (水) time:08:11
↑ default 計算は 'full'
    ↑ tuple は加減乗ができない
    ↑ cnvlv の世界でも ktpl の加減算とスカラー倍は必須だ:vector
↑ Fourier 変換と組み合わせて cnvlv を考えるならば vector length は固定したい
    ↑ default full にしておいて、[:N] を加えることで length N にする？ 
np.convolve(~[1,2,3,Z3],~[4,5,6,7,Z3])
===============================
[Z3(1) Z3(1) Z3(1) Z3(1) Z3(2) Z3(0)]
↑ np.ndarray dtype=object

cnvlv(~[1,2,3,Z3],~[4,5,6,7,Z3])
===============================
[Z3(1) Z3(1) Z3(1) Z3(1)]
---- ClFldTns:< class 'sfCrrntIni.Z3'> ----

//@@
class ktpl(tuple):
    def __new__(cls,tplAg):
        n=len(tplAg)
        for k in range(n)[::-1]:
            if tplAg[k] != 0:
                break

        return tuple.__new__(cls, tplAg[:k+1])

    def __equ__(self, tplAg):
        pass

print ktpl((0,1,0,0))
//@@@
(0, 1)


** Comments_1_2: a consideration:下の違いを認めるべき？
np.convolve((0,  1 ,  2 ), (0, 0,  3 ))
===============================
[0 0 0 3 6]
↓↑
cnvlv((0,  1 ,  2 ), (0, 0,  3 ), 'full')
===============================
[ 0.  0.  0.  3.  6.]
---- ClTensor ----


* Comments_2  : counter mesure
date:2014/10/16
def cnvlv(*sq,**dct):
    """' default causal convolution of which length is max(len(a),len(b))
    '"""
    assert len(sq) >=2 or len(sq)>3, "In cnvlv(..), you set wrong parameters:"+str(sq)
    if not hasattr(sq[0], '__getitem__') and  hasattr(sq[0], '__iter__'):
        sq[0]=tuple(sq[0])
    if not hasattr(sq[1], '__getitem__') and  hasattr(sq[1], '__iter__'):
        sq[0]=tuple(sq[1])

    if len(sq)==2:
        if 'mode' in dct.keys():
            ndarAt = (np.convolve(sq[0],sq[1],**dct))
        else:
            ndarAt = (np.convolve(sq[0],sq[1],mode='full')[:max(len(sq[0]),len(sq[1]))])
    elif len(sq)==3:
        assert isinstance(sq[2], str) and sq[2] in ('full','valid','same'), (
               "In cnvlv(..), you set wrong parameters:"+str(sq))
        ndarAt = (np.convolve(sq[0],sq[1],mode=sq[2]))
    else:
        assert False

    if ndarAt.dtype == object:
        return sf.krry(ndarAt, ftype=type(ndarAt.ravel()[0]))  # return ClFldTns
    else:
        return sf.krry(ndarAt)                                 # return ClTensor

* Comments_3  : action scripts
×invalid なので下は使わない
↑date:2014/11/17 (月) time:09:44
v=cnvlv([1,2,3],[4,5]); v == ~[ 4, 13, 22] and isinstance(v,ClTensor)
v=cnvlv([1,2,3],[4,5]); (norm(v - [ 4, 13, 22])==0) and isinstance(v,np.ndarray)

v=cnvlv(~[1,2,3,Z3],[4,5]); v == ~[1,1,1,Z3] and isinstance(v,ClFldTns)
v=cnvlv([1,2,3],~[4,5,Z3]); v == ~[1,1,1,Z3] and isinstance(v,ClFldTns)
v=cnvlv(~[1,2,3,Z3],~[4,5,Z3]); v == ~[1,1,1,Z3] and isinstance(v,ClFldTns)
v=cnvlv(~[1,2,3,Z2],~[4,5,Z3]); v == ~[1,0,1,Z2] and isinstance(v,ClFldTns)

3rd parameters:('full','valid','same')
               mode=..
* Comments_4  : open 判への修正
×pysfOp\kNumericOp.py ← cnvlv() 機能の追加が invalid なので、このファイルは修正しない
未実装 date:2014/11/17 (月) time:09:44

